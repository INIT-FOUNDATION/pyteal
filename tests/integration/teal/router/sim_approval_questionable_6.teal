#pragma version 6
txn NumAppArgs
int 0
==
bnz main_l22
txna ApplicationArgs 0
method "add(uint64,uint64)uint64"
==
bnz main_l21
txna ApplicationArgs 0
method "sub(uint64,uint64)uint64"
==
bnz main_l20
txna ApplicationArgs 0
method "mul(uint64,uint64)uint64"
==
bnz main_l19
txna ApplicationArgs 0
method "div(uint64,uint64)uint64"
==
bnz main_l18
txna ApplicationArgs 0
method "mod(uint64,uint64)uint64"
==
bnz main_l17
txna ApplicationArgs 0
method "all_laid_to_args(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64"
==
bnz main_l16
txna ApplicationArgs 0
method "empty_return_subroutine()void"
==
bnz main_l15
txna ApplicationArgs 0
method "log_1()uint64"
==
bnz main_l14
txna ApplicationArgs 0
method "log_creation()string"
==
bnz main_l13
txna ApplicationArgs 0
method "approve_if_odd(uint32)void"
==
bnz main_l12
err
main_l12:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
int 0
extract_uint32
store 70
load 70
callsub approveifodd_9
int 1
return
main_l13:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
==
&&
assert
callsub logcreation_8
store 69
byte 0x151f7c75
load 69
concat
log
int 1
return
main_l14:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
txn OnCompletion
int OptIn
==
txn ApplicationID
int 0
!=
&&
||
assert
callsub log1_7
store 68
byte 0x151f7c75
load 68
itob
concat
log
int 1
return
main_l15:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
txn OnCompletion
int OptIn
==
||
assert
callsub emptyreturnsubroutine_6
int 1
return
main_l16:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 50
txna ApplicationArgs 2
btoi
store 51
txna ApplicationArgs 3
btoi
store 52
txna ApplicationArgs 4
btoi
store 53
txna ApplicationArgs 5
btoi
store 54
txna ApplicationArgs 6
btoi
store 55
txna ApplicationArgs 7
btoi
store 56
txna ApplicationArgs 8
btoi
store 57
txna ApplicationArgs 9
btoi
store 58
txna ApplicationArgs 10
btoi
store 59
txna ApplicationArgs 11
btoi
store 60
txna ApplicationArgs 12
btoi
store 61
txna ApplicationArgs 13
btoi
store 62
txna ApplicationArgs 14
btoi
store 63
txna ApplicationArgs 15
store 66
load 66
int 0
extract_uint64
store 64
load 66
int 8
extract_uint64
store 65
load 50
load 51
load 52
load 53
load 54
load 55
load 56
load 57
load 58
load 59
load 60
load 61
load 62
load 63
load 64
load 65
callsub alllaidtoargs_5
store 67
byte 0x151f7c75
load 67
itob
concat
log
int 1
return
main_l17:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 47
txna ApplicationArgs 2
btoi
store 48
load 47
load 48
callsub mod_4
store 49
byte 0x151f7c75
load 49
itob
concat
log
int 1
return
main_l18:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 44
txna ApplicationArgs 2
btoi
store 45
load 44
load 45
callsub div_3
store 46
byte 0x151f7c75
load 46
itob
concat
log
int 1
return
main_l19:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 41
txna ApplicationArgs 2
btoi
store 42
load 41
load 42
callsub mul_2
store 43
byte 0x151f7c75
load 43
itob
concat
log
int 1
return
main_l20:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 38
txna ApplicationArgs 2
btoi
store 39
load 38
load 39
callsub sub_1
store 40
byte 0x151f7c75
load 40
itob
concat
log
int 1
return
main_l21:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 35
txna ApplicationArgs 2
btoi
store 36
load 35
load 36
callsub add_0
store 37
byte 0x151f7c75
load 37
itob
concat
log
int 1
return
main_l22:
txn OnCompletion
int OptIn
==
bnz main_l24
err
main_l24:
txn ApplicationID
int 0
!=
assert
byte "optin call"
log
int 1
return

// add
add_0:
store 1
store 0
load 0
load 1
+
store 2
load 2
retsub

// sub
sub_1:
store 4
store 3
load 3
load 4
-
store 5
load 5
retsub

// mul
mul_2:
store 7
store 6
load 6
load 7
*
store 8
load 8
retsub

// div
div_3:
store 10
store 9
load 9
load 10
/
store 11
load 11
retsub

// mod
mod_4:
store 13
store 12
load 12
load 13
%
store 14
load 14
retsub

// all_laid_to_args
alllaidtoargs_5:
store 30
store 29
store 28
store 27
store 26
store 25
store 24
store 23
store 22
store 21
store 20
store 19
store 18
store 17
store 16
store 15
load 15
load 16
+
load 17
+
load 18
+
load 19
+
load 20
+
load 21
+
load 22
+
load 23
+
load 24
+
load 25
+
load 26
+
load 27
+
load 28
+
load 29
+
load 30
+
store 31
load 31
retsub

// empty_return_subroutine
emptyreturnsubroutine_6:
byte "appear in both approval and clear state"
log
retsub

// log_1
log1_7:
int 1
store 32
load 32
retsub

// log_creation
logcreation_8:
byte 0x00106c6f6767696e67206372656174696f6e
store 33
load 33
retsub

// approve_if_odd
approveifodd_9:
store 34
load 34
int 2
%
bnz approveifodd_9_l2
int 0
return
approveifodd_9_l2:
int 1
return