name: "Build workflow"
on:
  pull_request:
  push:
    tags:
      - v**
    branches:
      - master

jobs:
  build-test:
    runs-on: ubuntu-20.04
    container: python:${{ matrix.python }}
    strategy:
      matrix:
        python: ["3.10"]
    steps:
      - run: python3 --version
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install python dependencies
        run: make setup-development
      - name: Build and Test
        run: make lint-and-test

  run-integration-tests:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python: [ "3.10" ]
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v3
        with:
          python-version: "${{ matrix.python }}"
      - name: Test Python version
        run: |
          installed="$(python --version)"
          expected="${{ matrix.python }}"
          echo $installed
          [[ $installed =~ "Python ${expected}" ]] && echo "Configured Python" || (echo "Failed to configure Python" && exit 1)
      - name: Local ACT Only - Install required os level applications
        if: ${{ env.ACT }}
        run: |
          sudo apt update -y
          sudo apt install -y curl
          sudo apt -y install ca-certificates curl gnupg lsb-release
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          sudo echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt update
          sudo apt -y install docker-ce docker-ce-cli containerd.io
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          docker-compose --version
      - name: Create sandbox
        run: make sandbox-dev-up
      - name: Install python dependencies
        run: make setup-development
      - name: Integration Tests Only
        run: make test-integration
      - name: Stop running images
        run: make sandbox-dev-stop

  build-docset:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python: [ "3.10" ]
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v3
        with:
          python-version: "${{ matrix.python }}"
      - name: Install python dependencies
        run: make setup-docs
      - name: Make docs
        run: make bundle-docs
      - name: Archive docset
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2
        with:
          name: pyteal.docset
          path: docs/pyteal.docset.tar.gz

  upload-to-pypi:
    runs-on: ubuntu-20.04
    container: python:3.10
    needs: ['build-test', 'run-integration-tests', 'build-docset']
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags') }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: make setup-wheel
      - name: Build package
        run: make bdist-wheel
      - name: Release
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
