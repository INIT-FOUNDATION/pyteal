name: "Build workflow"
on:
  pull_request:
  push:
    tags:
      - v**
    branches:
      - master
jobs:
  build-test:
    runs-on: ubuntu-20.04
    container: python:${{ matrix.python }}-slim
    strategy:
      matrix:
        python: ['3.6', '3.7', '3.8', '3.9', '3.10']
    steps:
      - run: python3 --version
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install required os level applications
        run: |
          apt update -y
          apt install -y git make
          git --version
      - name: Install pip dependencies
        run: make pip
      - name: Build and Test
        run: make build-and-test
  run-integration-tests:
    runs-on: ubuntu-20.04
    # container: ubuntu:22.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install required os level applications
        run: |
          sudo apt update -y
          sudo apt install -y curl git nodejs python-is-python3 python3-pip
          # pip install docker-compose
          sudo apt -y install ca-certificates curl gnupg lsb-release
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          sudo echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt update
          sudo apt -y install docker-ce docker-ce-cli containerd.io
      - name: Setup docker compose
        run: |
           sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
           sudo chmod +x /usr/local/bin/docker-compose
           sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
           docker-compose --version
#      - name: Install required os level applications
#        run: |
#         # https://serverfault.com/a/992421
#          export DEBIAN_FRONTEND=noninteractive
#          export TZ=Etc/UTC
#          apt update -y
#          apt install -y curl git nodejs python-is-python3 python3-pip
#          curl -fsSL https://get.docker.com -o get-docker.sh
#          sh get-docker.sh
#          pip3 install docker-compose
      - name: Clone sandbox
        uses: actions/checkout@v2
        with:
          repository: algorand/sandbox
          path: .sandbox
          ref: sleep_longer

      - name: Setup integration test environment
        run: make pip build integration-env-up
      - name: Run integration tests
        run: make blackbox
      - name: Tear down integration test environment
        run: make integration-env-down
  build-docset:
    runs-on: ubuntu-20.04
    container: python:3.9  # Needs `make`, can't be slim
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install pip dependencies
        run: |
          pip install -r requirements.txt
          pip install -r docs/requirements.txt
          pip install doc2dash
      - name: Make docs
        run: |
          cd docs
          make html
          doc2dash --name pyteal --index-page index.html --online-redirect-url https://pyteal.readthedocs.io/en/ _build/html
          tar -czvf pyteal.docset.tar.gz pyteal.docset
      - name: Archive docset
        uses: actions/upload-artifact@v2
        with:
          name: pyteal.docset
          path: docs/pyteal.docset.tar.gz
  upload-to-pypi:
    runs-on: ubuntu-20.04
    container: python:3.9
    needs: ['build-test']
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags') }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: pip install wheel
      - name: Build package
        run: python setup.py sdist bdist_wheel
      - name: Release
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
